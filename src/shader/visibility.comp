#version 450 core

layout(local_size_x = 8,  local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) writeonly buffer VoxelVisibility
{
    float visibility[];
};

layout(std430, binding = 1) writeonly buffer VoxelAlpha
{
    float alpha[];
};

uniform uvec3 volumeDim;    //!< spatial extents of the volume in number of
                            //!< voxels in the corresponding dimension
uniform vec3 voxelSize;     //!< size of a single voxel in model space

uniform vec3 eyePos;            //!< camera / eye position in world coordinates
uniform vec3 bbMin;             //!< axes aligned bounding box min. corner
uniform vec3 bbMax;             //!< axes aligned bounding box max. corner

uniform sampler3D volumeTex;            //!< 3D texture handle
uniform sampler2D transferfunctionTex;  //!< 3D texture handle

uniform float stepSize;         //!< distance between sample points between
                                //!< sample points in model space
uniform float stepSizeVoxel;    //!< distance between sample points in voxels
uniform float voxelDiagonal;    //!< Diagonal of a voxel in model space

uniform bool outputAlpha; //!< also output the alpha value of the voxel

#define M_PIH   1.570796
#define M_PI    3.141592
#define M_2PI   6.283185
#define EPS     0.000001

// ----------------------------------------------------------------------------
//   main
// ----------------------------------------------------------------------------
void main()
{
    /*float value = 0.f;      //!< value sampled from the volume

    bool intersect = false;         //!< flag if we did hit the bounding box
    float temp = 0.f;               //!< temporary variable

    vec3 rayOrig = eyePos;                          //!< origin of the ray
    vec3 rayDir = normalize(vWorldCoord - rayOrig); //!< direction of the ray

    */

    // terminate if the invocation ID does not match a voxel index
    if ((gl_GlobalInvocationID.x >= volumeDim.x) ||
        (gl_GlobalInvocationID.y >= volumeDim.y) ||
        (gl_GlobalInvocationID.z >= volumeDim.z) )
        return;

    // index for storing the calculated visibility in the linear shader
    // storage buffer object
    uint idx =
        gl_GlobalInvocationID.z * volumeDim.y * volumeDim.x +
        gl_GlobalInvocationID.y * volumeDim.x +
        gl_GlobalInvocationID.x;

    // For performance reasons the camera position already has to be in the
    // model space of the cuboid volume.
    vec3 voxelPos =
        bbMin +
        0.5f * voxelSize +
        vec3(gl_GlobalInvocationID.xyz) * voxelSize;
    vec3 rayDir = normalize(eyePos - voxelPos);


    // ray marching and opacity accumulation
    float opacity = 0.f;    //!< accumulated opacity
    bool terminateEarly = false;    //!< early ray termination

    vec3 pos = voxelPos;
    vec3 stepInc = rayDir * stepSize * voxelDiagonal;

    if (outputAlpha)
    {
        vec3 volCoord = (pos - bbMin) / (bbMax - bbMin);
        float value = texture(volumeTex, volCoord).r;
        vec4 tfColor = texture(transferfunctionTex, vec2(value, 0.5f));

        alpha[idx] = tfColor.a;
    }

    pos += 0.7f * voxelDiagonal * rayDir;
    while ( (pos.x >= bbMin.x) && (pos.y >= bbMin.y) && (pos.z >= bbMin.z) &&
            (pos.x <= bbMax.x) && (pos.y <= bbMax.y) && (pos.z <= bbMax.z) )
    {
        // sample the volume texture
        vec3 volCoord = (pos - bbMin) / (bbMax - bbMin);
        float value = texture(volumeTex, volCoord).r;
        vec4 tfColor = texture(transferfunctionTex, vec2(value, 0.5f));

        // alpha blending
        float adjustedAlpha = (1.f - pow(1.f - tfColor.a, stepSizeVoxel));
        opacity += (1.f - opacity) * adjustedAlpha;

        if (opacity > 0.999f)
        {
            terminateEarly = true;
            opacity = 1.f;
        }

        if (terminateEarly)
            break;

        pos += stepInc;
    }

    visibility[idx] = 1.f - opacity;

    // for debugging purposes
    //visibility[idx] = rayDir.x;
    //alpha[idx] = rayDir.y;
    //visibility[idx] = voxelPos.y;
    //visibility[idx] = rayDir.x;
}

